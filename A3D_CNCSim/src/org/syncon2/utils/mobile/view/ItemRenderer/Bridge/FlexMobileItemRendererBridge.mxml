<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				xmlns:s="library://ns.adobe.com/flex/spark" 
				xmlns:mx="library://ns.adobe.com/flex/mx"  
				height="100%" width="100%" creationComplete="onInit()"
				autoDrawBackground="false" xmlns:alarm="org.syncon.RosettaStone.view.mobile.alarm.*">
	
	
	<fx:Script> 
		<![CDATA[ 
			import mx.core.IVisualElement;
			import mx.core.UIComponent;
			import mx.events.ResizeEvent;
			
			import org.syncon.Customizer.model.CustomEvent;
			import org.syncon.RosettaStone.vo.AlarmVO;
			import org.syncon.Customizer.vo.MenuItemVO;
			[Bindable] private var first : Boolean = false;
			[Bindable] private var middle : Boolean = false;
			[Bindable] private var last : Boolean = false		;
			[Bindable] public var theme :    MenuItemVO = new MenuItemVO()
			override public function set data(value:Object):void { 
				super.data = value; 
				// Check to see if the data property is null. 
				if (value== null) 
					return; 
				// If the data property is not null,
				theme = value as MenuItemVO
				// set the Label controls appropriately. 
				
				this.updateItemRenderer()
				//.firstName + ', ' + value.lastName;
				//compLabel.text = value.companyID;
			} 
			static public var SETUP  : String = 'SETIP_IR'; 
			private var creationComplete : Boolean = false; 
			public var subRenderer :  Object; 
			private function onResize(e:Event):void
			{
				return;
			}		
			public function onInit() : void
			{
				  var e : CustomEvent = new  CustomEvent(SETUP, this ) 
				this.dispatchEvent( e) ; 
				var cf : ClassFactory = e.data as ClassFactory
				this.subRenderer =cf.newInstance(); 
				//this.subRenderer = this.owner['parentDocument'].subr; 
				this.holder.addElement(this.subRenderer as IVisualElement ) ; 
				this.creationComplete = true; 
				this.updateItemRenderer();
				this.subRenderer.addEventListener( Event.RESIZE, this.onResize , false ,0 , true ); 
			}
			
			public function updateItemRenderer() : void
			{
				if ( this.creationComplete == false ) return; 
				/* 	if ( theme.enabled )
				{
				txtLbl.text = theme.name.toString(); 
				this.currentState = 'normal'
				if ( this.theme.toolTip != null ) 
				this.txtLbl.toolTip = theme.toolTip.toString(); 
				}
				else
				{
				if ( this.txtLblDisabled != null ) 
				{
				txtLblDisabled.text = theme.name.toString(); 
				if ( this.theme.toolTip != null ) 
				this.txtLblDisabled.toolTip = ''; 
				}
				this.currentState = 'disabled';
				
				
				} */
				
				//this.txtLbl.text = this.theme.name; 
				//this.img.source = this.theme.pic; 
				this.subRenderer.data = this.data;
				//this.subRenderer.invalidateDisplayList()
				//	this.invalidateDisplayList()
				var dbg : Array =[ this.subRenderer.width, this.subRenderer.height, this.height, this.subRenderer.getLayoutBoundsHeight(),
					this.width, 
				this.unscaledHeight, this.unscaledWidth, this.parent.width]
					this.subRenderer.percentWidth = 100
				 	this.subRenderer.percentHeight = 100
				//		this.subRenderer.width = this.parent.width; 
					//	this.subRenderer.height = 20; 
						setTimeout( this.dropTime, 1000 ) ; 
						setTimeout( this.dropTime, 3000 ) ; 
						//	this.subRenderer.layoutHeight; 
					return; 
			}
			
			
			protected function resizee(event:ResizeEvent):void
			{
				if ( this.subRenderer == null ) 
					return; 
				// TODO Auto-generated method stub
				var dbg : Array =[ this.subRenderer.width, this.subRenderer.height, this.height, this.subRenderer.getLayoutBoundsHeight(),
					this.width, 
					this.unscaledHeight, this.unscaledWidth, this.parent.width]
					var bb : Array = [ this.holder.width, this.holder.height]
			//	trace();
			}
			
			private function dropTime():void
			{
				if ( this.subRenderer == null ) 
					return; 
			/* 	if ( this.parent == null ) 
					return;  */
				// TODO Auto-generated method stub
				var dbg : Array =[ this.subRenderer.width, this.subRenderer.height, this.height, this.subRenderer.getLayoutBoundsHeight(),
					this.width, 
					this.unscaledHeight, this.unscaledWidth,  ]  
				var bb : Array = [ this.holder.width, this.holder.height]
					this.height = this.subRenderer.getLayoutBoundsHeight()
				//trace(dbg, bb);
				
			}
			
		]]> 
	</fx:Script> 
<!--	
	<s:states> 
		<s:State name="normal"/> 
		<s:State name="hovered"/> 
		<s:State name="disabled"/> 
	</s:states> 
	<s:Image id="img" />
	<s:Label id="txtLbl" color="0"     includeIn="normal"
			 verticalCenter="0" paddingLeft="5" paddingRight="5"
			 useHandCursor="true" buttonMode="true"
			 fontSize="12"   />
	<s:Label id="txtLblDisabled"    color="0x808080" includeIn="disabled"
			 verticalCenter="0" paddingLeft="5"  paddingRight="5"   
			 creationComplete="this.updateItemRenderer()"
			 fontSize="12"   />	-->
	<!--<alarm:AlarmRenderer  id="asdf" width="100%" height="100%"/>-->
	<s:Group width="100%" height="100%" id="holder" resize="resizee(event)" />
</s:ItemRenderer>
