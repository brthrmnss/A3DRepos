<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2009/04/29/using-virtual-layout-on-a-spark-list-control-in-flex-gumbo/ -->
<!-- http://www.jeffryhouser.com/index.cfm/2011/1/25/How-do-you-force-rendereres-to-refresh-in-a-spark-list -->
<s:Group name="Spark_List_layout_useVirtualLayout_test"
		 xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 contentBackgroundColor="0xff0000"   creationComplete="onInit(event)"
		 initialize="init();" xmlns:local="*" xmlns:onenotehelpers="org.syncon.onenote.onenotehelpers.*" xmlns:base="org.syncon.onenote.onenotehelpers.base.*" xmlns:impl="org.syncon.onenote.onenotehelpers.impl.*">
	
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			
			import org.syncon.onenote.onenotehelpers.base.Viewer3;
			
			import spark.skins.spark.HScrollBarSkin;
			import spark.skins.spark.HScrollBarThumbSkin;
			import spark.skins.spark.HScrollBarTrackSkin;
			import spark.skins.spark.VScrollBarSkin;
			private function init():void {}
			public var page :  PageVO; 
			public function setDp () : void{
				this.controller.dataProvider  = page; 
			}
			//public var containerController  : ContainerController
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				this.init()
			}
			
			protected function onInit(event:FlexEvent):void
			{
				var p : PageVO = new PageVO();
				var lists : Array = []; 
				for (var i : int =0; i<5-0+10; i++) {
					//arr.push("Item #" + i);
					var list : ListVO = new ListVO()
					/* if ( Math.random() > 0.5 ) 
						list.entries = ListVO.makeRandom(50); //var l : lister = new lister()
					else
						list.entries = ListVO.make1(1); //var l : lister = new lister()
					 */
						list.data = this.randomPic()
					list.x = 100*i
					list.y = 100*i
					lists.push( list ) ; 
					list.name = i.toString();
				}
				p.lists = new ArrayCollection(lists); 
				page = p; 
				import flash.utils.setTimeout; 
				this.controller.setup( lister2, measureList, workspace, groupBg, scroller ) ;  
				//setTimeout( this.setDp , 2000/2000 ) ; 
				this.setDp()
				
			}
			
			public function randomPic()  :  Object
			{
				 var arr : Array = ['assets/AppIcon36.png', 'assets/AppIcon48.png',
					'assets/AppIcon72.png']
				 var select : Object = arr[Math.round(Math.random()*(arr.length-1)) ]
				 return select
			}
			public var controller : Viewer3 = new  Viewer3(); 
		]]>
	</fx:Script>
	<!--<fx:Declarations>
	<local:Viewer3	 id="workspace"    classForListers="{lister2}"
	listsMeasure="{measureList}" groupBg="{bo2o}"
	group="{this.boo}"   scroller="{scroller}"  />
	</fx:Declarations>-->
	<!--	<s:RichText id="container" visible="true" width="350" />-->
	<!--<local:TLFContainer id="tlfContainer" visible="false" />-->
	<impl:lister2 id="measureList"    visible="false" />
	<!--<s:HScrollBar />-->
	<!--
	<s:Scroller width="520" height="380" id="scroller" minViewportInset="1" focusEnabled="false">
	<s:Group clipAndEnableScrolling="true" id="descriptionBox">
	<s:RichText id="richText" creationComplete="updateText('add')"
	width="490" textAlign="justify" fontFamily="Arial" fontSize="12" color="#999999" />
	</s:Group>
	</s:Scroller>
	-->
	<!--	<s:Scroller  height="100%"  width="100%"   id="scroller" minViewportInset="1" focusEnabled="false">
	<s:Group id="workspace" clipAndEnableScrolling="true"  >
	
	</s:Group>
	</s:Scroller>-->
	
	<s:Scroller width="520" height="380" id="scroller"
				
				minViewportInset="1" focusEnabled="false" contentBackgroundColor="0xFFF000">
		<s:Group id="workspace" >
			<s:Group id="groupBg" >
				<s:Rect top="0" bottom="0" left="0" right="0">
					<s:stroke>
						<s:SolidColorStroke weight="1" color="0x000000"/>
					</s:stroke>
					<s:fill>
						<s:SolidColor color="0xFF0000"/>
					</s:fill>
				</s:Rect>
			</s:Group>
		</s:Group>
		
	</s:Scroller>
	<!--
	<local:TLFContainer id="contain" />-->
	
</s:Group>