<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2009/04/29/using-virtual-layout-on-a-spark-list-control-in-flex-gumbo/ -->
<!-- http://www.jeffryhouser.com/index.cfm/2011/1/25/How-do-you-force-rendereres-to-refresh-in-a-spark-list -->
<s:Group name="Spark_List_layout_useVirtualLayout_test"
		 xmlns:fx="http://ns.adobe.com/mxml/2009" implements="org.syncon.onenote.onenotehelpers.base.IListable"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 buttonMode="true" useHandCursor="true"
		 
		 xmlns:mx="library://ns.adobe.com/flex/halo" creationComplete="onInit(event)"
		 initialize="init();" xmlns:others="org.syncon.onenote.onenotehelpers.base.others.*" xmlns:impl="org.syncon.onenote.onenotehelpers.impl.*">
	<!--<others:SuperPanel3	-->
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.FlexEvent;
			import mx.events.PropertyChangeEvent;
			import mx.events.ResizeEvent;
			
			import org.syncon.CncSim.model.CustomEvent;
			import org.syncon.CncSim.vo.ColorLayerVO;
			import org.syncon.CncSim.vo.ImageLayerVO;
			import org.syncon.CncSim.vo.ItemRendererHelpers;
			import org.syncon.CncSim.vo.LayerBaseVO;
			import org.syncon.CncSim.vo.TextLayerVO;
			import org.syncon.onenote.onenotehelpers.base.IListVO;
			
			import spark.components.List;
			import spark.layouts.supportClasses.LayoutBase;
			
			
			public static const ON_CLICK:String='ON_CLICK';
			public static const DATA_CHANGED:String='DATA_CHANGED';
			public static const MOVED:String='MOVED';
			public static const RESIZED_MANIALY  : String = 'RESIZED_MANIALY';
			public static const REPOSITION  : String = 'REPOSITION';
			
			//public var list : ListVO; 
			
			//public var dp : ArrayCollection = new ArrayCollection(); 
			
			public var creationComplete : Boolean = false; 
			public var s : ItemRendererHelpers = new ItemRendererHelpers(null)
			
			protected function onInit(event:FlexEvent):void
			{
				this.addEventListener('EvtMovingState_Moved', this.onMoved ) 
				this.creationComplete = true
				this.addEventListener(MouseEvent.MOUSE_DOWN, this.onClick ) ; 
				
				this.initHandles(); 
			}
			private function init():void {
				
				//this.lister.dataGroup.addEventListener(PropertyChangeEvent.PROPERTY_CHANGE, handle);
				//this.lister.addEventListener( 'resizeManually', this.onResizeManually  )
				//this.lister.scroller.setStyle('verticalScrollPolicy', 'off');			
			}
			
			private function handle(e: PropertyChangeEvent):void {
				if (e.source == e.target && e.property == "contentHeight")
				{
					trace('inside', e.property, "changed to", e.newValue);
				}
			}			
			private function onResizeManually(e:Event):void
			{
				this.callLater( this.arrList.refresh )	
				return; 
			}
			protected function button1_clickHandler(event:MouseEvent):void
			{
				var numDigits : int =  Math.random()*20 
				this.lister.dataProvider.addItem( 'New thing ... ' + (Math.random()*12) .toFixed(numDigits)  )
				this.callLater( pat2 )
				//this.list.dataProvider.addItem( '' )
				this.arrList.refresh()
				this.callLater( this.arrList.refresh )	
				this.lister.layout.measure()
				
			}
			override public function set y(value:Number):void
			{
				super.y = value; 
			}
			private function pat2() : void
			{
				//this.list.invalidateSize()
				//this.list.dataProvider.removeItemAt( this.list.dataProvider.length -1 ) 
				//this.list.dataProvider.refresh()
				//this.list.dataGroup.invalidateDisplayList();
			}
			
			[Bindable] public var currentLayout : LayoutBase= new LayoutBase();//=this.noScrollLayout; 
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				//this.arrList.itemUpdated(
				//this.list.updateRenderer(
				//this.list.dataGroup.invalidateDisplayList();
				// TODO Auto-generated method stub
				this.arrList.refresh()
			}
			
			public function saveUiPositionToList()  :  void
			{
				this.dispatchEvent( new CustomEvent ( MOVED, [this.x, y] ) ) 
				this.listData.x = this.x
				this.listData.y = this.y 
				this.listData.width = this.width
				this.listData.height = this.height; 
			}
			
			public function onMoved(e:Event):void
			{
				this.saveUiPositionToList()
			}
			private function resetData(o:Object):void{
				this.data = o; 
			}
			
			public function goActive() : void
			{
				return;
				this.active = true; 	
				if ( this.image != null ) 
					image.active = this.active; 
				if ( this.text != null ) 
					text.active = this.active; 
			}
			
			public function goHidden() : void
			{
				return;
				this.active = false; 	
				if ( this.image != null ) 
					image.active = this.active; 
				if ( this.text != null ) 
					text.active = this.active; 
			}
			
			public var layer : LayerBaseVO = new LayerBaseVO(); 
			
			public function set data ( a :   Object ) : void
			{
				layer = a as LayerBaseVO; 
				s.listenForObj( layer, LayerBaseVO.UPDATED, this.onUpdatedLayer ) ; 	
				this.onUpdatedLayer(); 
				if ( a == null ) 
				{
					if ( this.image != null ) 
						this.image.data = null; 
					if ( this.text != null ) 
						this.text.data = null;
					if ( this.colorR != null ) 
						this.colorR.data = null;
					this.dispatchEvent( new CustomEvent(DATA_CHANGED) ) 
					return; 
				}
				
				this.visible = this.layer.visible; 
				if ( this.layer.visible == false ) 
				{
					trace('not visible, klr' ); 
				}
				//a = a.data2
				if ( a is ImageLayerVO ) 
				{
					this.currentState  = 'Image'; 
					this._resetting = true;
					if ( this.image == null )
					{
						import flash.utils.setTimeout;
						setTimeout(   this.resetData, 150, a ) 
						return
					}
					image.data = a ; 
					//this._resetting = false;
					/* this._resetting = true;
					this.img.source = null; 
					this._resetting = false;
					this.img.source = a;  */
				}	
				if ( a is ColorLayerVO ) 
				{
					this.currentState  = 'Color'; 
					this._resetting = true;
					if ( this.colorR == null )
					{
						import flash.utils.setTimeout;
						setTimeout(   this.resetData, 150, a ) 
						return
					}
					colorR.data = a ; 
					//this._resetting = false;
					/* this._resetting = true;
					this.img.source = null; 
					this._resetting = false;
					this.img.source = a;  */
				}	
				if ( a is TextLayerVO ) 
				{
					this.currentState = 'Text'; 
					this._resetting = true;
					text.data = a ; 
					//this.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				}
				this.dispatchEvent( new CustomEvent(DATA_CHANGED) ) //why was this below? 
					//when it is below ... the image will notify my insteantly of soame changes and messup everything 
			}
			
			private function onUpdatedLayer(e:Event=null):void
			{
				if ( this.active == false ) 
					return; 
				if ( layer == null ) 
					return; 
				//if has alreayd been hidden by my peoples ...
				if ( this.visible == false && e == null ) 
					return; 
				this.visible = this.layer.visible; 
			}
			override public function set visible(value:Boolean):void
			{
				if ( this.layer != null )
				{
					if ( value && this.layer.visible == false ) 
					{
						//8-28-11 bug ...
						trace('set visible', 'false')
						//Viewer3 is forcing it to be visible ... possibly change children ... 
						value = this.layer.visible; 
					}
					//we clear them all when loading in new 'IPageVO's
					value = this.layer.visible;
				}
				super.visible = value; 
			}
			[Bindable] public var dp  :   ArrayCollection = new ArrayCollection()//.getInstance(); 
			private var   _resetting  : Boolean = false 
			public function get resetting():Boolean
			{
				return _resetting;
			}
			
			public function set resetting(value:Boolean):void
			{
				_resetting = value;
			}
			public function set scrollHeight(b :  Number ) : void
			{
				//this.height = b; 
				//	this.lister.height = b; 
			}
			
			public function get lister( ): List  
			{
				return this.list_ as List
			}
			
			public var list__ : IListVO
			public function  set listData( b :   IListVO ) : void
			{
				list__ = b; 
			}
			public function  get  listData() :  IListVO 
			{
				return list__; 
			}			
			
			public var list_ : Object = {}
			private var active:Boolean=true;
			
			
			protected function onClick(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( ON_CLICK ) ) ; 
			}
			/**
			 * Change current layer immedeatly ..., not when click completete
			 * */
			protected function onMouseDown(event:MouseEvent):void
			{
				this.dispatchEvent( new CustomEvent( ON_CLICK ) ) ; 
			}
			private function initHandles():void
			{
				// TODO Auto Generated method stub
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:ArrayCollection  id="arrList" />
	</fx:Declarations>
	<!--<s:layout>
	<s:VerticalLayout />
	</s:layout>-->
	<s:states>
		<s:State name="Text" />
		<s:State name="Image" />
		<s:State name="Color" />
	</s:states>
	
	<impl:layer_image_item_renderer id="image" includeIn="Image" />
	<impl:layer_text_item_renderer  id="text" includeIn="Text" />
	<impl:layer_color_item_renderer id="colorR" includeIn="Color" />
</s:Group>