<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/halo"
		 creationComplete="onInit(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import org.syncon.Customizer.model.CustomEvent;
			import org.syncon.Customizer.vo.ItemRendererHelpers;
			import org.syncon.Customizer.vo.LayerBaseVO;
			import org.syncon.Customizer.vo.TextLayerVO;
			
			import spark.events.TextOperationEvent;
			public var s : ItemRendererHelpers = new ItemRendererHelpers(null)
			public var creationComplete : Boolean = false; 
			
			
			
			protected function onInit(event:FlexEvent):void
			{
				this.creationComplete = true
			}
			private function init():void {
			}
			
			private var _layer : TextLayerVO = new TextLayerVO(); 

			public function get layer():TextLayerVO
			{
				return _layer;
			}

			public function set layer(value:TextLayerVO):void
			{
				if ( value == null ) 
				{
					trace('set textlayer layer to null')
				}
				_layer = value;
			}

			private var resetNext:Boolean;
			public var active:Boolean=true;
			private var lastLayer:TextLayerVO;
			
			public function set data ( value :   Object ) : void
			{
				this.txt.text = ''; 
				this.txtEdit.text = ''; 
				this.resetNext = true; 
			
				this.bg.visible = false; 
				this.bg.height = 0;  
				this.bg.width =0;// this.layer.width; 
				
				layer = value as TextLayerVO
				s.listenForObj( layer, LayerBaseVO.UPDATED, this.onUpdatedLayer ) ; 	
				if ( layer == null ) 
				{
					lastLayer = null
					this.txt.text = ''; 
					this.txtEdit.text = ''; 
					return; 
				}
				
				this.onUpdatedLayer(); 
			}
			
			private function onUpdatedLayer(e:Event=null):void
			{
				if ( this.active == false ) 
					return; 
				if ( layer == null ) 
				{
					lastLayer = null
					return;
				}
				if ( this.lastLayer != this.layer ) 
				{
					//this.visible = this.layer.visible; 
					this.txt.setStyle('fontSize', layer.fontSize ) ;
					if ( this.layer.fontFamily != null ) 
						this.txt.setStyle('fontFamily', layer.fontFamily ) ;
					else
					{
						this.layer.fontFamily = this.txt.getStyle('fontFamily'); 
						this.layer.update( 'fontFamily' ) ; 
					}
					
					//handle any situations where this component might not resize 
					if ( this.layer.locked  ) 
					{
						
						txt_updateCompleteHandler(null);
					}
					
					
				}
				else
				{
					if ( this.layer.propChanged == 'fontSize' )
					{
						this.txt.setStyle('fontSize', layer.fontSize ) ;
					}
					if ( this.layer.propChanged == 'fontFamily' )
					{
						this.txt.setStyle('fontFamily', layer.fontFamily ) ;
					}
					if ( this.layer.propChanged == 'color' )
					{
						this.txt.setStyle('color', layer.color ) ;
					}					
					this.layer.propChanged = null
				}
				this.lastLayer =  this.layer
				//this.txt.setStyle('fontFamily', asdf ) ; 

				this.txt.text  = layer.text; 
				
			}
			
			protected function img_resizeHandler(event:ResizeEvent):void
			{
				if ( this.active == false ) 
					return; 
				if ( this.layer == null ) 
					return; 
				//return;
				
				if ( this.layer.locked == false ) 
				{
					this.width = this.txt.width; 
					this.height = this.txt.height; 
					
					this.layer.nonChromeWidth = this.width; 
					this.layer.nonChromeHeight = this.height;
				}
				//this is detrimetnal 
				/* this.layer.width = this.width; 
				this.layer.height = this.height; 
				*/
				this.layer.update(); 
				this.dispatchEvent( new  CustomEvent( layer_item_renderer.RESIZED_MANIALY ) ) ; 
				return; 
				//this.parentDocument.parentDocument.height = this.img.height; 
				//this.parentDocument.parentDocument.width = this.img.width; 
				//this.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				this.txt.measuredWidth
				if ( resetNext )
				{
					resetNext = false; 
					return; 
				}
				//trace('1',this.layer.text, this.txt.width, this.txt.height ) ; 
				//this.parentDocument.parentDocument.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
			}
			
			protected function onComplete(event:Event):void
			{
				// TODO Auto-generated method stub
				//this.dispatchEvent( ) ) ; 
				//this.callLater( this.dispatchEvent, [new ResizeEvent(ResizeEvent.RESIZE)] )
				this.notifyOfResize()
				//				/this.parentDocument.parentDocument.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				//this.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
				//trace('2',this.layer.text, this.txt.width, this.txt.height ) ; 
			}
			
			protected function txt_updateCompleteHandler(event:FlexEvent):void
			{
				if ( this.active == false ) 
					return; 
				if ( this.layer == null ) 
					return; 
				if ( this.parentDocument == null ) //y are these necessary? b/c txt update doesnt 'care?
					return; 
				// TODO Auto-generated method stub
				//
				if ( resetNext )
				{
					this.parentDocument.resetting= false; 
					resetNext = false; 
					if ( this.layer.locked == false ) 
					{	 
						this.height = this.txt.height; 
						this.width = this.txt.width; 
					}
					else
					{
						this.height =this.layer.height; 
						this.width = this.layer.width; 
						this.parentDocument.height =this.layer.height; 
						this.parentDocument.width = this.layer.width; 
					}
					trace('3', this.layer.text, this.txt.width, this.txt.height ) ; 
					this.notifyOfResize()
				}
				
			}
			
			public function   notifyOfResize() : void{
				var notify : Object = this.parentDocument; 
				//notify = this.parentDocument.parentDocument
				parentDocument.dispatchEvent( new ResizeEvent(ResizeEvent.RESIZE) ) ; 
			}
			
			protected function txt_clickHandler(event:MouseEvent):void
			{
				return; 
				this.currentState = ( this.currentState == 'normal' ) ? 'edit' : 'normal' 
				if ( this.currentState =='edit' ) 
					this.txtEdit.setFocus(); 
			}
			
			protected function onChange(event:TextOperationEvent):void
			{
				this.layer.text = this.txtEdit.text; 
				this.layer.update(); 
			}
			
			public function setupTxtEdit() : void
			{
				txtEdit.text = this.layer.text; 
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<fx:Array  id="dropFilters">
			<!--<s:GlowFilter id="filterGlow"  strength="8" alpha="1"
						  color="0xd2d2d2" blurX="2" blurY="2" />
			<s:GlowFilter alpha="0.6" color="0xd2d2d2" blurX="4" blurY="4" />-->
			<!--<s:BlurFilter id="filterBlur"  blurX="2" blurY="2" />-->
		</fx:Array>

	</fx:Declarations>
	<s:states>
		<s:State name="normal"/>
		<s:State name="edit"/>
	</s:states>
	<!--   top="0" left="0" right="0" bottom="0"  -->
	<s:Rect  id="bg" visible="false" alpha="1">
		<s:fill >
			<s:SolidColor color="0xcdcdcd" />
		</s:fill>
	<!--	 <s:stroke>
		<s:SolidColorStroke color="0xe9e9e9"/>
		</s:stroke> -->
	</s:Rect>
	<s:RichText id="txt" click="txt_clickHandler(event)" resize="img_resizeHandler(event)"
				horizontalCenter="0" verticalCenter="0" fontFamily="Helvetica"
			 updateComplete="txt_updateCompleteHandler(event)" >
		<s:filters>
			
		</s:filters>
	</s:RichText>
<!--	<s:Label id="txt" click="txt_clickHandler(event)" resize="img_resizeHandler(event)"
			  horizontalCenter="0" verticalCenter="0"
			 updateComplete="txt_updateCompleteHandler(event)"/>-->
	
	<s:TextInput id="txtEdit" visible="false" width="{this.txt.width}" height="{this.txt.height}"
				 change="onChange(event)" click="txt_clickHandler(event)"
				 creationComplete="this.setupTxtEdit()"
				 horizontalCenter="0" verticalCenter="0"
				 visible.edit="true"/>
</s:Group>