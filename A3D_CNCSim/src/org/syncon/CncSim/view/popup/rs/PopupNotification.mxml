<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009"
					  xmlns:s="library://ns.adobe.com/flex/spark"
					  xmlns:popup1="org.syncon.NightStand.view.popup.*"
					  width="100%" height="100%" backgroundAlpha="0.0" creationComplete="onInit()"
					  implements="org.syncon.popups.view.IPopup" xmlns:popup="org.syncon.CncSim.view.popup.*" xmlns:mobile="org.syncon.TalkingClock.view.mobile.*">
	
	<fx:Metadata> 
		[Event(name="cancel", type="flash.events.Event")] 		
		[Event(name="setup", type="flash.events.Event")] 
	</fx:Metadata> 	
	
	<fx:Script>
		<![CDATA[
			import caurina.transitions.Tweener;
			
			import mx.core.UIComponent;
			
			import org.syncon.CncSim.model.CustomEvent;
			import org.syncon.popups.view.IPopup;
			
			import spark.events.IndexChangeEvent;
			
			import sss.Shelpers.Shelpers.other.TweenerHelpers;
			import sss.Shelpers.Shelpers.ui.PopupCode;
			static public const LIST_CHANGED : String = 'listChanged'; 	
			static public const OK : String = 'save'; 	
			static public const CANCEL : String = 'cancel'; 	
			static public const BACK : String = 'back'; 	
			static public const SETUP : String = 'setup'; 	
			
			static public const SELECT : String = 'SELECT'; 	
			static public const NEXT_LESSON : String = 'NEXT_LESSON'; 	
			static public const GO_HOME : String = 'GO_HOME'; 	
			
			static public const UPLOAD : String = 'UPLOAD'; 	
			
			public var creationComplete : Boolean = false; 
			private var timer_AutoHide : Timer = new Timer(10000, 1 ) ; 
			public function onInit() : void 
			{
				this.creationComplete = true; 
				this.popupCode.center()
				
				this.timer_AutoHide.addEventListener(TimerEvent.TIMER, this.onTimerHideComplete ) ; 
			}
			
			public  function create(app:Object)  : IPopup
			{
				var popup : PopupPickImage = new PopupPickImage()
				popup.popupCode =  PopupCode.Create( popup ,app ) 
				return popup			
			} 
			
			private var _popupCode :   PopupCode; 
			public function get  popupCode () : PopupCode { return _popupCode  } 
			public function set  popupCode ( _popupCode_ : PopupCode) : void {   _popupCode = _popupCode_  } 
			
			public function show()  : void
			{
				this.popupCode.open(  false ,false  ) ;
				this.parentApplication.width;
				this.popupCode.moveToComponent( this.parentApplication as UIComponent, 'br', false,
					false, true, -this.width - 30, -this.height - 10 ) ; 
				this.x 
				this.y
				TweenerHelpers.TProp(this, 'y', this.y - 20, this.popupCode.fadeTime, 0 ) ; 
				return;
			}
			public function hide( ) : void
			{
				this.popupCode.close() 
				TweenerHelpers.TProp(this, 'y', this.y - 20, this.popupCode.fadeTime, 0 ) ; 
			}
			
			
			protected function onSave(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( OK) ) 
			}
			
			protected function onCancel(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( CANCEL ) ) 
			}
			
			
			public var args : Array = [] ; 
			public var fxDone:Function;
			public function showPopup( msg : String, title : String,  openTime : Number = 4,  fxDone : Function = null ) : void
			{
				this.txtMessage.text = msg; 
				this.txtName.text = title; 
				//this.width =  this.parentApplication.width*.8
				//this.height =  this.parentApplication.height*.8
				this.dispatchEvent( new Event (SETUP   )) 
				this.show()
				this.fxDone = fxDone;
				
				if ( openTime > 0 ) 
				{
					timer_AutoHide.delay = openTime*1000
					timer_AutoHide.start()
				}
			}
			
			protected function onRepeat(event:MouseEvent=null):void
			{
			}
			
			protected function onNext(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( NEXT_LESSON ) )  
			}
			
			protected function noHome(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( GO_HOME ) ) 
			}			
			
			protected function onBack(event:MouseEvent=null):void
			{
				this.dispatchEvent( new Event( BACK ) )  
			}
			
			
			protected function onUpload(event:MouseEvent):void
			{
				this.dispatchEvent( new Event( UPLOAD ) )  
			}
			
			protected function onTimerHideComplete(event:TimerEvent):void
			{
				this.hide()
			}
			
		]]>
	</fx:Script>
	
	
	
	<s:Rect left="0" right="0" top="0" bottom="0"  radiusX="0" radiusY="0" >
		<s:stroke>
			<s:SolidColorStroke color="0xA1A1A1" alpha="1"    weight="1" />
		</s:stroke>
		<s:fill>
			<s:SolidColor color="0xFFFFFF" alpha="1" />
		</s:fill>
	</s:Rect>
	
	<s:VGroup paddingBottom="12" paddingLeft="12" paddingRight="12" paddingTop="12" >
		<s:Group id="header" width="250" clipAndEnableScrolling="true">
			<s:BitmapImage source="assets/images/sprite_headers.png" smooth="true" height="100%" width="100%" />
			<s:Label id="txtName" text="Zippo  Image  Library" x="10" fontSize="20" verticalCenter="6" color="0xffffff"/>
		</s:Group>
		<s:Spacer height="10" />
		<s:RichText id="txtMessage" height="100" width="100%"  />
		<s:HGroup width="100%" horizontalAlign="center" >
			<s:Button label="OK"  click="onCancel()" />
		</s:HGroup>
	</s:VGroup>
	
	
	
	
	
	<s:filters>
		<s:DropShadowFilter alpha="0.2" angle="45.0" blurX="8.0" blurY="8.0" color="#0"
							distance="8.0" hideObject="false" inner="false" knockout="false"
							quality="2" strength="1"/> 
	</s:filters> 
	
	
	
</s:SkinnableContainer>
