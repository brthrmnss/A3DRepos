<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 width="100%" height="100%" creationComplete="onInit(event)" xmlns:ui="org.syncon.Customizer.view.ui.*" xmlns:skins="org.syncon.Customizer.view.skins.*" xmlns:mx="library://ns.adobe.com/flex/mx">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			
			import org.syncon.Customizer.model.CustomEvent;
			import org.syncon.Customizer.vo.ImageLayerVO;
			import org.syncon.Customizer.vo.ItemRendererHelpers;
			import org.syncon.Customizer.vo.LayerBaseVO;
			import org.syncon.Customizer.vo.TextLayerVO;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			public static const CHANGE_FONT_FAMILY:String='CHANGE_FONT_FAMILY';
			public static const CHANGE_COLOR:String='CHANGE_COLOR';
			public static const CHANGE_FONT_SIZE:String='CHANGE_FONT_SIZE';
			
			public var s : ItemRendererHelpers = new ItemRendererHelpers(null)
			protected function onInit(event:FlexEvent):void
			{
			}		
			private var _layer :  TextLayerVO = new TextLayerVO() ;
			public function get layer()  : TextLayerVO { return this._layer } 
			public function set layer (layer_ : TextLayerVO ) : void
			{
				s.listenForObj( layer_, LayerBaseVO.UPDATED, this.onUpdatedLayer ) ; 	
				this._layer = layer_; 
				this.onUpdatedLayer(); 
			}
			
			private function onUpdatedLayer(e:Event=null):void
			{
				this.txt.text = this.layer.text
				this.fontFamily.selectedItem = this.layer.fontFamily
				this.fontSize.selectedItem = this.layer.fontSize; 
				this.chkVisible.selected = this.layer.visible ; 
				this.txt.maxChars
			}
			
			protected function chkVisible_changeHandler(event:Event):void
			{
				this.layer.visible = this.chkVisible.selected; 
				this.layer.update(); 
			}
			
			
			
			private function fontSize_changeHandler(event:IndexChangeEvent):void {
				var item:Object = event.currentTarget.selectedItem;
				/* var fontStyle:TextLayoutFormat = new TextLayoutFormat();
				fontStyle.fontSize = item;
				editManager.applyLeafFormat(fontStyle); */

				this.dispatchEvent( new CustomEvent( CHANGE_FONT_SIZE, int(item )  ) ) 
			}
			
			private function fontFamily_changeHandler(event:IndexChangeEvent):void {
				var item:Object = event.currentTarget.selectedItem;
				/* var fontStyle:TextLayoutFormat = new TextLayoutFormat();
				fontStyle.fontFamily = item;
				editManager.applyLeafFormat(fontStyle); */
				this.dispatchEvent( new CustomEvent( CHANGE_FONT_FAMILY, item   ) ) 
			}
			
			protected function txt_changeHandler(event:TextOperationEvent):void
			{
				this.layer.text = this.txt.text; 
				this.layer.update(); 
			}
			protected function colorList_ClickHandler(event:Event):void
			{
				//this.oldFocus = this.getFocus()
				return; 
			}
			
			private function colorPicker_changeHandler(event:Event):void {
				var colorFormat:uint;
				if (event is ColorPickerEvent)
					colorFormat = event.currentTarget.selectedColor as uint;
				else if (event is IndexChangeEvent)
					colorFormat = event.currentTarget.selectedItem as uint;
				
				//this.colorPicker.close()
				//		.closeDropDown(true); 
				//this.controller.changeColor(colorFormat ); 
				//this.callLater( this.oldFocus.setFocus ); 	
				this.dispatchEvent( new CustomEvent( CHANGE_COLOR, colorFormat   ) ) 
			}
			
			
			protected function colorList_focusInHandler(event:FocusEvent):void
			{
				return;
				this.oldFocus = this.getFocus()
				return; 
			}
		]]>
	</fx:Script>
	<fx:Declarations>
	</fx:Declarations>
	
	<s:VGroup verticalAlign="middle">
		<s:Label text="Text"  fontSize="24" fontWeight="bold"/>
		
		<s:TextInput id="txt" change="txt_changeHandler(event)"  />
		<s:CheckBox id="chkVisible" change="chkVisible_changeHandler(event)" />
<!--		<s:DropDownList id="dropDownFont" />
		<s:DropDownList id="dropDownSize" dataProvider="{new ArrayList([8,10,12,16,24,36,48,72])}" />-->
		<s:ComboBox id="fontSize" width="50" cornerRadius="0" selectedItem="12"
					change="fontSize_changeHandler(event)" toolTip="Font size"
					dataProvider="{new ArrayCollection([6,7,8,9,10,11,12,13,14,15,16,18,20,22,24,26,28,32,36,40,44,48,54,60,66,72,80,88,96])}"/>
		
		<s:ComboBox id="fontFamily" width="100" cornerRadius="0" selectedIndex="0"
					change="fontFamily_changeHandler(event)" toolTip="Font family">
			<s:dataProvider>
				<s:ArrayCollection>
					<fx:Object>Arial</fx:Object>
					<fx:Object>Courier</fx:Object>
					<fx:Object>Courier New</fx:Object>
					<fx:Object>Geneva</fx:Object>
					<fx:Object>Georgia</fx:Object>
					<fx:Object>Helvetica</fx:Object>
					<fx:Object>Times New Roman</fx:Object>
					<fx:Object>Times</fx:Object>
					<fx:Object>Verdana</fx:Object>
				</s:ArrayCollection>
			</s:dataProvider>
		</s:ComboBox>
		<!--- @private -->
		<mx:ColorPicker id="colorPicker" height="23" color="0x000000"
						mouseOver="this.colorList_ClickHandler(event)" focusAlpha="0.1"
						change="colorPicker_changeHandler(event)" toolTip="Text color"/>
		<!--- @private -->
	<skins:ColorList id="colorList" width="50" height="23" visible="false"
								  includeInLayout="false"
								  focusIn="colorList_focusInHandler(event)" 
								     skinClass="org.syncon.Customizer.view.skins.ColorListSkin"
								  itemRenderer="org.syncon.Customizer.view.skins.ColorListItemRenderer"
								  selectedIndex="0" change="colorPicker_changeHandler(event)"
								  toolTip="Text color"/>
	</s:VGroup>
</s:Group>